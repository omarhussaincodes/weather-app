{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FSAD-1\\\\weather-app\\\\src\\\\WeatherApp.js\",\n  _s = $RefreshSig$();\n/* eslint-disable no-undef */\nimport React, { useEffect, useState } from 'react';\nimport WeatherTile from './components/WeatherTile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherApp() {\n  _s();\n  const [latitude, setLatitude] = useState();\n  const [longitude, setLongitude] = useState();\n  const [data, setData] = useState();\n  let message;\n  function handleError(error) {\n    // Display error based on the error code.\n    const {\n      code\n    } = error;\n    switch (code) {\n      case GeolocationPositionError.TIMEOUT:\n        // Handle timeout.\n        message = \"Connection timeout.\";\n        break;\n      case GeolocationPositionError.PERMISSION_DENIED:\n        // User denied the request.\n        message = \"Please allow location access to view the weather.\";\n        break;\n      case GeolocationPositionError.POSITION_UNAVAILABLE:\n        // Position not available.\n\n        break;\n      default:\n        break;\n    }\n  }\n\n  // called on very first render and everytime the state (lat,long) changes.\n  useEffect(() => {\n    console.log(\"Use Effect is Calledd!!\");\n    const fetchWeatherData = async () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n      }, err => {\n        console.log(err);\n      }, {\n        enableHighAccuracy: false,\n        maximumAge: 0\n      });\n      await fetch(`${process.env.REACT_APP_WEATHER_APP_API_URL}?lat=${44.6486}&lon=${-63.5859487}&appid=${process.env.REACT_APP_WEATHER_APP_API_KEY}`).then(res => res.json()).then(res => {\n        console.log(res);\n        if (res) {\n          setData(res);\n        } else {\n          setData([]);\n        }\n      }).catch(e => console.log(e));\n    };\n    fetchWeatherData();\n  }, [latitude, longitude]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data ? /*#__PURE__*/_jsxDEV(WeatherTile, {\n        weatherData: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"No data found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n_s(WeatherApp, \"NOlcL2zd8CcNMm9NUnF2ZEBKHhc=\");\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useEffect","useState","WeatherTile","WeatherApp","latitude","setLatitude","longitude","setLongitude","data","setData","message","handleError","error","code","GeolocationPositionError","TIMEOUT","PERMISSION_DENIED","POSITION_UNAVAILABLE","console","log","fetchWeatherData","navigator","geolocation","getCurrentPosition","position","coords","err","enableHighAccuracy","maximumAge","fetch","process","env","REACT_APP_WEATHER_APP_API_URL","REACT_APP_WEATHER_APP_API_KEY","then","res","json","catch","e"],"sources":["C:/Users/FSAD-1/weather-app/src/WeatherApp.js"],"sourcesContent":["/* eslint-disable no-undef */\r\nimport React, { useEffect, useState } from 'react';\r\nimport WeatherTile from './components/WeatherTile';\r\n\r\nfunction WeatherApp() {\r\n    const [latitude, setLatitude] = useState();\r\n    const [longitude, setLongitude] = useState();\r\n    const [data, setData] = useState();\r\n    let message;\r\n\r\n    function handleError(error) {\r\n        // Display error based on the error code.\r\n        const { code } = error;\r\n        switch (code) {\r\n            case GeolocationPositionError.TIMEOUT:\r\n                // Handle timeout.\r\n                message = \"Connection timeout.\"\r\n                break;\r\n            case GeolocationPositionError.PERMISSION_DENIED:\r\n                // User denied the request.\r\n                message = \"Please allow location access to view the weather.\"\r\n                break;\r\n            case GeolocationPositionError.POSITION_UNAVAILABLE:\r\n                // Position not available.\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // called on very first render and everytime the state (lat,long) changes.\r\n    useEffect(() => {\r\n        console.log(\"Use Effect is Calledd!!\");\r\n        const fetchWeatherData = async () => {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                setLatitude(position.coords.latitude);\r\n                setLongitude(position.coords.longitude);\r\n            }, (err) => {\r\n                console.log(err);\r\n            }, { enableHighAccuracy: false, maximumAge: 0 });\r\n\r\n            await fetch(`${process.env.REACT_APP_WEATHER_APP_API_URL}?lat=${44.6486}&lon=${-63.5859487}&appid=${process.env.REACT_APP_WEATHER_APP_API_KEY}`)\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res);\r\n                    if (res) {\r\n                        setData(res);\r\n                    } else {\r\n                        setData([]);\r\n                    }\r\n                }).catch(e => console.log(e));\r\n        };\r\n        fetchWeatherData();\r\n    }, [latitude, longitude]);\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n\r\n            </div>\r\n            <div>\r\n                {\r\n                    data ?\r\n                        <WeatherTile weatherData={data} /> :\r\n                        <h1>No data found!</h1>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherApp\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,0BAA0B;AAAC;AAEnD,SAASC,UAAU,GAAG;EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,EAAE;EAC1C,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,EAAE;EAC5C,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,EAAE;EAClC,IAAIS,OAAO;EAEX,SAASC,WAAW,CAACC,KAAK,EAAE;IACxB;IACA,MAAM;MAAEC;IAAK,CAAC,GAAGD,KAAK;IACtB,QAAQC,IAAI;MACR,KAAKC,wBAAwB,CAACC,OAAO;QACjC;QACAL,OAAO,GAAG,qBAAqB;QAC/B;MACJ,KAAKI,wBAAwB,CAACE,iBAAiB;QAC3C;QACAN,OAAO,GAAG,mDAAmD;QAC7D;MACJ,KAAKI,wBAAwB,CAACG,oBAAoB;QAC9C;;QAEA;MACJ;QACI;IAAM;EAElB;;EAEA;EACAjB,SAAS,CAAC,MAAM;IACZkB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,MAAMC,gBAAgB,GAAG,YAAY;MACjCC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,QAAQ,IAAK;QACnDnB,WAAW,CAACmB,QAAQ,CAACC,MAAM,CAACrB,QAAQ,CAAC;QACrCG,YAAY,CAACiB,QAAQ,CAACC,MAAM,CAACnB,SAAS,CAAC;MAC3C,CAAC,EAAGoB,GAAG,IAAK;QACRR,OAAO,CAACC,GAAG,CAACO,GAAG,CAAC;MACpB,CAAC,EAAE;QAAEC,kBAAkB,EAAE,KAAK;QAAEC,UAAU,EAAE;MAAE,CAAC,CAAC;MAEhD,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,6BAA8B,QAAO,OAAQ,QAAO,CAAC,UAAW,UAASF,OAAO,CAACC,GAAG,CAACE,6BAA8B,EAAC,CAAC,CAC3IC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACC,GAAG,IAAI;QACTjB,OAAO,CAACC,GAAG,CAACgB,GAAG,CAAC;QAChB,IAAIA,GAAG,EAAE;UACL1B,OAAO,CAAC0B,GAAG,CAAC;QAChB,CAAC,MAAM;UACH1B,OAAO,CAAC,EAAE,CAAC;QACf;MACJ,CAAC,CAAC,CAAC4B,KAAK,CAACC,CAAC,IAAIpB,OAAO,CAACC,GAAG,CAACmB,CAAC,CAAC,CAAC;IACrC,CAAC;IACDlB,gBAAgB,EAAE;EACtB,CAAC,EAAE,CAAChB,QAAQ,EAAEE,SAAS,CAAC,CAAC;EAEzB,oBACI;IAAA,wBACI;MAAA;MAAA;MAAA;IAAA,QAEM,eACN;MAAA,UAEQE,IAAI,gBACA,QAAC,WAAW;QAAC,WAAW,EAAEA;MAAK;QAAA;QAAA;QAAA;MAAA,QAAG,gBAClC;QAAA,UAAI;MAAc;QAAA;QAAA;QAAA;MAAA;IAAK;MAAA;MAAA;MAAA;IAAA,QAE7B;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEd;AAAC,GAlEQL,UAAU;AAAA,KAAVA,UAAU;AAoEnB,eAAeA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}